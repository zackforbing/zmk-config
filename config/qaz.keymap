/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define NUM_SYM 1
#define NAV     2

&lt { quick-tap-ms = <150>; };

&soft_off { hold-time-ms = <5000>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <150>;
        };

        td: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance";
            #binding-cells = <0>;
            bindings = <&none>, <&none>, <&none>, <&none>;
        };

        bksp_del: bksp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSP_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        bdlt: bksp_del_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BKSP_DEL_LAYER_TAP";
            bindings = <&mo>, <&bksp_del>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        slash_question {
            bindings = <&kp SLASH>;
            key-positions = <27 28>;
            layers = <0>;
        };

        num_add {
            bindings = <&kp PLUS>;
            key-positions = <0 1>;
            layers = <1>;
        };

        num_subtract {
            bindings = <&kp KP_SUBTRACT>;
            key-positions = <1 2>;
            layers = <1>;
        };

        num_multiply {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <2 3>;
            layers = <1>;
        };

        num_divide {
            bindings = <&kp KP_DIVIDE>;
            key-positions = <3 4>;
            layers = <1>;
        };

        mko_enter {
            bindings = <&kp ENTER>;
            key-positions = <26 17 8>;
            layers = <0>;
        };

        qw_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        rg_tab {
            bindings = <&kp TAB>;
            key-positions = <3 14>;
            layers = <0>;
        };

        ef_shifttab {
            bindings = <&kp LS(TAB)>;
            key-positions = <2 13>;
            layers = <0>;
        };

        spcbkspc_space {
            bindings = <&kp SPACE>;
            key-positions = <32 33>;
            layers = <0>;
        };

        pw {
            bindings = <&pw>;
            key-positions = <1 10 8 19>;
            layers = <1>;
        };

        wdv_enter {
            bindings = <&kp ENTER>;
            key-positions = <1 12 23>;
            layers = <0>;
        };

        nav_enter {
            bindings = <&kp ENTER>;
            key-positions = <11 12 13>;
            layers = <2>;
        };

        nav_toggle {
            bindings = <&tog 2>;
            key-positions = <11 2 13>;
        };
    };

    macros {
        pw: pw {
            compatible = "zmk,behavior-macro";
            label = "PW";
            #binding-cells = <0>;
            bindings = <&kp LS(Y) &kp F &kp LS(P) &kp N2 &kp N7 &kp E &kp X &kp AT &kp N4 &kp PRCNT &kp N4 &kp LS(V) &kp LS(E) &kp LS(F) &kp LS(T) &kp RET>;
        };

        js_doc: js_doc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR &kp STAR &kp SPACE>;
            label = "JS_DOC";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Alpha {
            bindings = <
&kp Q             &kp W         &kp E       &kp R        &kp T      &kp Y      &kp U        &kp I       &kp O       &kp P
&mt LCTRL A       &hm LALT S    &hm LGUI D  &hm LSHFT F  &kp G      &kp H      &hm RSHFT J  &hm RGUI K  &hm RALT L  &mt RCTRL SQT
&kp Z             &kp X         &kp C       &kp V        &kp B      &kp N      &kp M        &kp COMMA   &kp DOT
&kp C_PLAY_PAUSE  &kp LEFT_GUI  &kp TAB     &lt 1 SPACE  &bdlt 2 0  &kp ENTER  &kp ESCAPE   &mo 3
            >;
        };

        num_sym {
            bindings = <
&kp N1              &kp N2           &kp N3         &kp N4             &kp N5          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS          &kp UNDER       &kp PLUS             &kp TILDE
&mt LCTRL NUMBER_6  &hm LEFT_ALT N7  &hm LGUI N8    &hm LEFT_SHIFT N9  &kp N0          &kp LEFT_BRACKET      &hm RIGHT_SHIFT RIGHT_BRACKET  &hm RGUI MINUS  &hm RIGHT_ALT EQUAL  &mt RCTRL GRAVE
&kp KP_ENTER        &none            &kp LS(LG(S))  &kp KP_DOT         &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BSLH                       &kp SEMICOLON   &kp COLON
&trans              &trans           &none          &trans             &lt 3 TAB       &kp RET               &trans                         &trans
            >;
        };

        nav {
            bindings = <
&mt LSHIFT PG_UP            &mt LEFT_ALT HOME  &mt LC(LSHIFT) UP_ARROW  &mt LEFT_ALT END  &kp LS(LA(LC(BACKSLASH)))  &none    &kp F9        &kp F10      &kp F11           &kp F12
&mt LC(LEFT_CONTROL) PG_DN  &kp LEFT_ARROW     &kp DOWN_ARROW           &kp RIGHT_ARROW   &bksp_del                  &none    &hm RSHFT F5  &hm RGUI F6  &hm RIGHT_ALT F7  &mt RCTRL F8
&kp LC(Z)                   &kp LC(X)          &kp LC(C)                &kp LC(V)         &kp LC(LS(K))              &kp F1   &kp F2        &kp F3       &kp F4
&trans                      &trans             &trans                   &kp LCTRL         &trans                     &kp RET  &trans        &kp FSLH
            >;
        };

        Admin {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans      &trans       &sys_reset
&trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans      &trans       &trans
&bt BT_CLR    &trans        &trans        &trans        &trans        &trans  &trans  &trans      &bootloader
&bt BT_PRV    &bt BT_NXT    &trans        &trans        &trans        &trans  &trans  &bt BT_CLR
            >;

            label = "adm";
        };
    };
};
